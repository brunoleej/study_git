import numpy as np

# 1. A와 B가 위와 같을 때 AB를 연습장에 손으로 계산하고 넘파이의 계산 결과와 맞는지 확인한다.
A = np.array([[1,2,3],[4,5,6]])
B = np.array([[1,2],[3,4],[5,6]])

print(A @ B)    
'''
[[22 28]
 [49 64]]
'''

# 2. 순서를 바꾸어 BA를 손으로 계산하고 넘파이의 계산 결과와 맞는지 확인한다. BA가 AB와 같은가?
A = np.array([[1,2,3],[4,5,6]])
B = np.array([[1,2],[3,4],[5,6]])

print(B @ A)    
'''
[[ 9 12 15]
 [19 26 33]
 [29 40 51]]
'''

# 3. A, B가 다음과 같을 때, AB, BA를 (계산이 가능하다면) 손으로 계산하고 넘파이의 계산 결과와 맞는지 확인한다. AB, BA 모두 계산 가능한가?
A = np.array([[1,2,3]])
B = np.array([[4,7],[5,8],[6,9]])

print(A @ B)    # [[32 50]]
# print(B @ A)    # 연산이 불가능

# 4. A, B가 다음과 같을 때, AB, BA를 (계산이 가능하다면) 손으로 계산하고 넘파이의 계산 결과와 맞는지 확인한다. AB, BA 모두 계산 가능한가? BA의 결과가 AB와 같은가?
A = np.array([[1,2],[3,4]])
B = np.array([[5,6],[7,8]])

print(A @ B)
'''
[[19 22]
 [43 50]]
'''
print(B @ A)
'''
[[23 34]
 [31 46]]
'''

# 5. A가 다음과 같을 때, AA_T와 A_TA를 손으로 계산하고 넘파이의 계산 결과와 맞는지 확인한다. AA_T와 A_TA의 크기는 어떠한가? 항상 정방행렬이 되는가?
A = np.array([[1,2],[3,4],[5,6]])

print(A @ A.T)
'''
[[ 5 11 17]
 [11 25 39]
 [17 39 61]]
'''
print(A.T @ A)
'''
[[35 44]
 [44 56]]
'''

# 6. x가 다음과 같을 때, x_Tx와 xx_T를 손으로 계산하고 넘파이의 계산 결과와 맞는지 확인한다. x_Tx와 xx_T의 크기는 어떠한가? 어떤 것이 스칼라이고 어떤 것이 정방행렬인가?
x = np.array([[1],[2],[3]])
print(x.T @ x)  # [[14]]
print(x @ x.T)
'''
[[1 2 3]
 [2 4 6]
 [3 6 9]]
'''
